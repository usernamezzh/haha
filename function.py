# -*-coding:utf-8-*-
'''
函数是组织好的，可重复使用的，用来实现单一或相关联功能的代码段
函数能提高应用的模块性，和代码的重复利用率。

定义一个函数
你可以定义一个由自己想要功能的函数，以下是简单的规则
1.函数代码块以def关键字开头，后接函数标志符名称和圆括号（）
2.任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。
3.函数第一行语句可以选择性的使用文档字符串-用于存放函数说明。
4.函数内容以冒号:起始，并且缩进。
5.return[表达式]结束函数，选择性的返回一个值给调用方，不带表达式的return相当于返回None
'''
def hello():
    print("hello World!")

def max(a,b):
    if a > b:
        return a
    else:
        return b

def area(width, height):
    return width * height

# 函数调用：定义了一个函数（给了函数一个名称，指定了函数里包含的参数和代码块结构），这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从python命令提示符执行。
def printme(str):
    print(str)
    return

# 参数传递：在python中，类型属于对象，变量是没有类型的。
# a = [1,2,3]     a = 'string'   [1,2,3]是list类型，'string'是String类型，而变量a是没有类型，它仅仅是一个对象的引用（一个指针），是一个可以指向list类型对象，也可以是一个指向String类型对象
# 可更改和不可更改对象：在python中，String、tuple和number是不可更改的对象，list和dict是可更改的对象
# 不可变对象：变量a = 5后再赋值a = 10,这里实际是新生成一个int值对象10，再让a指向它，而5被丢弃，不是改变a的值，相当于新生成了a.
# 可变类型：变量赋值la=[1,2,3,4]后再赋值la[2]=5,则是将list la的第三个元素值更改，本身la没动，只是其内部一部分值被修改了。
# 不可变类型：类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。
# 可变类型：类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响。
# python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。
if __name__ == "__main__":
    hello()
    print(max(5,4))
    print(area(5,4))
    printme("我调用了一次函数")
    printme("我再次调用了函数")